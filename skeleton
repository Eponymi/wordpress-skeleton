#!/usr/bin/env php
<?php

use Skeleton\Command as Command;
use Skeleton\Skeleton;
use Skeleton\SkeletonAwareInterface;
use Symfony\Component\Console\Application;

if (!file_exists(__DIR__.'/vendor/autoload.php')) {
    echo "Slow down there, buddy!  We have to install Composer & some ruby gems first!\n";

    $gemPath = trim(`which gem`);

    if (empty($gemPath)) {
        throw new \Exception('You must install rubygems first. (sudo aptitude install rubygems)');

        return 1;
    }

    $interpreter    = 'php -d detect_unicode=Off';
    $commands       = array(
        sprintf('curl -s http://getcomposer.org/installer | %s -- %s', $interpreter, __DIR__)   => !file_exists(__DIR__.'/composer.phar'),
        sprintf('%s %s/composer.phar install --dev', $interpreter, __DIR__)                     => true,
        'sudo gem install --no-ri --no-rdoc vagrant-hostmaster'                                 => !filter_var(`gem list vagrant-hostmaster -i`, FILTER_VALIDATE_BOOLEAN),
        'sudo gem install --no-ri --no-rdoc capistrano'                                         => !filter_var(`gem list capistrano -i`, FILTER_VALIDATE_BOOLEAN),
        'sudo gem install --no-ri --no-rdoc capistrano-ext'                                     => !filter_var(`gem list capistrano-ext -i`, FILTER_VALIDATE_BOOLEAN),
    );

    foreach ($commands as $command => $install) {
        if ($install) {
            passthru($command, $error);

            if ($error) {
                die(sprintf("Failed to install Composer [%s]\n", $error));
            }
        }
    }
}

require __DIR__.'/vendor/autoload.php';

$console    = new Application('WordPress Skeleton', '0.1');
$skeleton   = new Skeleton(__DIR__.'/config/skeleton.yml');
$commands   = array(
    new Command\ConfigureSkeletonCommand('configure'),
    new Command\GenerateSkeletonCommand('generate'),
    new Command\InfoSkeletonCommand('info'),
    new Command\OpenSkeletonCommand('open'),
    new Command\BackupDatabaseWordPressCommand('wp:db:backup'),
    new Command\CreateDatabaseWordPressCommand('wp:db:create'),
    new Command\DropDatabaseWordPressCommand('wp:db:drop'),
    new Command\RestoreDatabaseWordPressCommand('wp:db:restore'),
    new Command\ActivateThemeWordPressCommand('wp:theme:activate'),
    new Command\InstallWordPressCommand('wp:install'),
    new Command\InstallPluginsWordPressCommand('wp:plugins:install'),
    new Command\ThemeTestImportWordPressCommand('wp:import:theme-test')
);

foreach ($commands as $command) {
    if ($command instanceof SkeletonAwareInterface) {
        $command->setSkeleton($skeleton);
    }
}

$console->addCommands($commands);
$console->run();
