<?php

namespace Skeleton\Command;

use Skeleton\Console\Helper\DialogHelper;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Yaml\Yaml;

class ConfigureSkeletonCommand extends SkeletonCommand
{
    protected function configure()
    {
        $this
            ->setDescription('Configures skeleton for development & deployment')
            ->setDefinition(array(
                new InputOption('repo',     '', InputOption::VALUE_REQUIRED, 'The FETCH URL for this project'),
                new InputOption('name',     '', InputOption::VALUE_OPTIONAL, 'The official name of the project'),
                new InputOption('domain',   '', InputOption::VALUE_REQUIRED, 'The destination domain for this theme'),
                new InputOption('author',   '', InputOption::VALUE_OPTIONAL, 'The name of the theme author'),
                new InputOption('ip',       '', InputOption::VALUE_REQUIRED, 'The local development IP address'),
            ))
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $repo   = Validators::validateRepository($input->getOption('repo') ?: $this->guessRepository());
        $name   = Validators::validateName($input->getOption('name') ?: $this->guessName($repo));
        $domain = Validators::validateDomain($input->getOption('domain'));
        $ip     = Validators::validateIp($input->getOption('ip'));
        $author = $input->getOption('author');
        $salts  = file_get_contents('https://api.wordpress.org/secret-key/1.1/salt/');

        $output->writeln('Generating...');

        $generated = $this->skeleton->generateSkeleton(array(
            'name'                  => $name,
            'description'           => 'Generated by WordPress Skeleton',
            'author'                => $author,
            'domain'                => $domain,
            'repository'            => $repo,
            'deploy'                => array(
                'local'             => array(
                    'web'           => array(
                        'host'      => sprintf('local.%s', $domain),
                        'ip'        => $ip,
                        'user'      => 'vagrant',
                        'password'  => 'vagrant',
                    ),
                    'db'            => array(
                        'user'      => 'root',
                        'password'  => 'vagrant',
                    ),
                ),
            ),
            'wordpress'             => array(
                'salts'             => str_replace("\n", "\n".str_repeat(' ', 8), trim($salts)),
                'local'             => array(
                    'db'            => array(
                        'host'      => 'localhost',
                        'name'      => 'wordpress',
                        'user'      => 'vagrant',
                        'password'  => 'vagrant',
                    ),
                ),
            ),
        ));

        foreach ($generated as $file) {
            $output->writeln(sprintf("\tGenerated <info>%s</info>", $file));
        }
    }

    protected function interact(InputInterface $input, OutputInterface $output)
    {
        $dialog = $this->getDialogHelper();

        $dialog->writeSection($output, 'Welcome to the WordPress Skeleton Configurator!');

        $repo   = $input->getOption('repo') ?: $this->guessRepository();
        $repo   = $dialog->askAndValidate($output, $dialog->getQuestion('Repository URL', $repo), array('Skeleton\Command\Validators', 'validateRepository'), false, $repo);

        $name   = $input->getOption('name') ?: $this->guessName($repo);
        $name   = $dialog->askAndValidate($output, $dialog->getQuestion('Project name', $name), array('Skeleton\Command\Validators', 'validateName'), false, $name);

        $domain = $input->getOption('domain') ?: $this->guessDomain($repo);
        $domain = $dialog->askAndValidate($output, $dialog->getQuestion('Destination domain', $domain), array('Skeleton\Command\Validators', 'validateDomain'), false, $domain);

        $author = $input->getOption('author') ?: $this->guessAuthor();
        $author = $dialog->ask($output, $dialog->getQuestion('Author name', $author), $author);

        $ip     = $input->getOption('ip') ?: $this->guessIp();
        $ip     = $dialog->askAndValidate($output, $dialog->getQuestion('Local development IP address', $ip), array('Skeleton\Command\Validators', 'validateIp'), false, $ip);

        $input->setOption('repo',   $repo);
        $input->setOption('name',   $name);
        $input->setOption('domain', $domain);
        $input->setOption('author', $author);
        $input->setOption('ip',     $ip);

        $output->writeln('');
    }

    protected function getDialogHelper()
    {
        $dialog = $this->getHelperSet()->get('dialog');

        if (!$dialog || !$dialog instanceof DialogHelper) {
            $this->getHelperSet()->set($dialog = new DialogHelper());
        }

        return $dialog;
    }

    private function guessAuthor()
    {
        if ($this->skeleton->has('author')) {
            return $this->skeleton->get('author');
        }

        return trim(`git config user.name`) ?: null;
    }

    private function guessDomain($repo)
    {
        if ($this->skeleton->has('domain')) {
            return $this->skeleton->get('domain');
        }

        $name   = strtolower(basename($repo, '.git'));
        $domain = sprintf('%s.%s',
            pathinfo($name, PATHINFO_FILENAME),
            pathinfo($name, PATHINFO_EXTENSION) ?: 'com'
        );

        return $domain;
    }

    private function guessIp()
    {
        if ($this->skeleton->has('deploy.local.web.ip')) {
            return $this->skeleton->get('deploy.local.web.ip');
        }

        $blocks = array(
            array('10.0.0.0', '10.255.255.255'),
            array('172.16.0.0', '172.31.255.255'),
            array('192.168.0.0', '192.168.255.255'),
        );

        $block  = $blocks[array_rand($blocks)];
        $range  = array_map('ip2long', $block);

        $long   = rand(current($range) + 1, end($range) - 1);
        $ip     = long2ip($long);

        return $ip;
    }

    private function guessName($repo)
    {
        if ($this->skeleton->has('name')) {
            return $this->skeleton->get('name');
        }

        $filename   = pathinfo($repo, PATHINFO_FILENAME);
        $name       = ucwords(preg_replace('/[-]+/', ' ', $filename));

        return $name ?: null;
    }

    private function guessRepository()
    {
        if ($this->skeleton->has('repository')) {
            return $this->skeleton->get('repository');
        }

        $parts = explode('Fetch URL: ', trim(`git remote show -n origin | grep "Fetch URL"`));

        return end($parts) ?: null;
    }
}
